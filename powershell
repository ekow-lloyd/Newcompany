If (!(Get-module ActiveDirectory )) {
    Import-Module ActiveDirectory
    Clear-Host
    }
  
  $Users=Import-csv c:\cloudcom2.csv
  $a=1;
  $b=1;
  $failedUsers = @()
  $successUsers = @()
  $VerbosePreference = "Continue"
  $ErrorActionPreference='stop'
  $LogFolder = "$env:userprofile\desktop\logs"
  
   ForEach($User in $Users)
     {
     $FirstName = $User.FirstName.substring(0,1).toupper()+$User.FirstName.substring(1).tolower()
     $LastName  = $User.LastName.substring(0,1).toupper()+$User.LastName.substring(1).tolower()
  
     $FullName = $User.FirstName + " " + $User.LastName
  
     $SAM = $user.FirstName.Substring(0,1) + $user.LastName 
     
     $dnsroot = '@' + (Get-ADDomain).dnsroot
  
     $SAM=$sam.tolower()
  
     $Password = (ConvertTo-SecureString -AsPlainText 'Cloudcom.1' -Force)
  
     
     $UPN = $SAM + "$dnsroot" 
  
     #$OU="OU=Cloudcom,DC=E-L,DC=local" #this will set ALL users to the OU of Cloudcom/E-L.local.  From your changes and understanding I think you'd be better to put this in the switch case.
  
     $email=$Sam + "$dnsroot"
  
  Try {
      if (!(get-aduser -Filter {samaccountname -eq "$SAM"})){
       $Parameters = @{
      'SamAccountName'        = $Sam
      'UserPrincipalName'     = $UPN 
      'Name'                  = $Fullname
      'EmailAddress'          = $Email 
      'GivenName'             = $FirstName 
      'Surname'               = $Lastname  
      'AccountPassword'       = $password 
      'ChangePasswordAtLogon' = $true 
      'Enabled'               = $true 
      'Path'                  = $OU
      'PasswordNeverExpires'  = $False 

  }

  switch ($user.Type) { 
      "Staff" { 
        $Parameters['Path'] = "OU=Staff,OU=Cloudcom,DC=E-L,DC=local"
        }
      "Admin" { 
        #Same as above with 'staff' but for Administration users.
        $Parameters['Path'] = "OU=Administration,OU=Cloudcom,DC=E-L,DC=local"
      }
      
  }
  
  New-ADUser @Parameters
       Write-Verbose "[PASS] Created $FullName "
       $successUsers += $FullName + "," +$SAM
      }
     
  }
  Catch {
      Write-Warning "[ERROR]Can't create user [$($FullName)] : $_"
      $failedUsers += $FullName + "," +$SAM + "," +$_
  }
  }
  if ( !(test-path $LogFolder)) {
      Write-Verbose "Folder [$($LogFolder)] does not exist, creating"
      new-item $LogFolder -type directory -Force 
  }
  
  
  Write-verbose "Writing logs"
  $failedUsers   |ForEach-Object {"$($b).) $($_)"; $b++} | out-file -FilePath  $LogFolder\FailedUsers.log -Force -Verbose
  $successUsers | ForEach-Object {"$($a).) $($_)"; $a++} | out-file -FilePath  $LogFolder\successUsers.log -Force -Verbose
  
  $su=(Get-Content "$LogFolder\successUsers.log").count
  $fu=(Get-Content "$LogFolder\FailedUsers.log").count
  
  
  Write-Host "$fu user creation unsuccessful " -NoNewline -ForegroundColor red
  Write-Host "$su Users Successfully Created "  -NoNewline -ForegroundColor green
  Write-Host " Review LogsFolder" -ForegroundColor Magenta
  Start-Sleep -Seconds 5
  Invoke-Item $LogFolder
